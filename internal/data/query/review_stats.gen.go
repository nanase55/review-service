// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"review-service/internal/data/model"
)

func newReviewStat(db *gorm.DB, opts ...gen.DOOption) reviewStat {
	_reviewStat := reviewStat{}

	_reviewStat.reviewStatDo.UseDB(db, opts...)
	_reviewStat.reviewStatDo.UseModel(&model.ReviewStat{})

	tableName := _reviewStat.reviewStatDo.TableName()
	_reviewStat.ALL = field.NewAsterisk(tableName)
	_reviewStat.ID = field.NewInt64(tableName, "id")
	_reviewStat.CreateBy = field.NewString(tableName, "create_by")
	_reviewStat.UpdateBy = field.NewString(tableName, "update_by")
	_reviewStat.CreateAt = field.NewTime(tableName, "create_at")
	_reviewStat.UpdateAt = field.NewTime(tableName, "update_at")
	_reviewStat.DeleteAt = field.NewTime(tableName, "delete_at")
	_reviewStat.TotalCount = field.NewInt32(tableName, "total_count")
	_reviewStat.AvgScore = field.NewInt32(tableName, "avg_score")
	_reviewStat.PositiveRate = field.NewFloat64(tableName, "positive_rate")
	_reviewStat.NegativeRate = field.NewFloat64(tableName, "negative_rate")
	_reviewStat.HasMediaRate = field.NewFloat64(tableName, "has_media_rate")
	_reviewStat.SpuID = field.NewInt64(tableName, "spu_id")
	_reviewStat.StoreID = field.NewString(tableName, "store_id")
	_reviewStat.ExtJSON = field.NewString(tableName, "ext_json")
	_reviewStat.CtrlJSON = field.NewString(tableName, "ctrl_json")

	_reviewStat.fillFieldMap()

	return _reviewStat
}

// reviewStat 评价统计表
type reviewStat struct {
	reviewStatDo reviewStatDo

	ALL          field.Asterisk
	ID           field.Int64   // 主键
	CreateBy     field.String  // 创建方标识
	UpdateBy     field.String  // 更新方标识
	CreateAt     field.Time    // 创建时间
	UpdateAt     field.Time    // 更新时间
	DeleteAt     field.Time    // 逻辑删除标记
	TotalCount   field.Int32   // 评价总数
	AvgScore     field.Int32   // 平均评分
	PositiveRate field.Float64 // 好评率 (%)
	NegativeRate field.Float64 // 差评率 (%)
	HasMediaRate field.Float64 // 带图率 (%)
	SpuID        field.Int64   // 商品ID
	StoreID      field.String  // 店铺ID
	ExtJSON      field.String  // 信息扩展
	CtrlJSON     field.String  // 控制扩展

	fieldMap map[string]field.Expr
}

func (r reviewStat) Table(newTableName string) *reviewStat {
	r.reviewStatDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r reviewStat) As(alias string) *reviewStat {
	r.reviewStatDo.DO = *(r.reviewStatDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *reviewStat) updateTableName(table string) *reviewStat {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewInt64(table, "id")
	r.CreateBy = field.NewString(table, "create_by")
	r.UpdateBy = field.NewString(table, "update_by")
	r.CreateAt = field.NewTime(table, "create_at")
	r.UpdateAt = field.NewTime(table, "update_at")
	r.DeleteAt = field.NewTime(table, "delete_at")
	r.TotalCount = field.NewInt32(table, "total_count")
	r.AvgScore = field.NewInt32(table, "avg_score")
	r.PositiveRate = field.NewFloat64(table, "positive_rate")
	r.NegativeRate = field.NewFloat64(table, "negative_rate")
	r.HasMediaRate = field.NewFloat64(table, "has_media_rate")
	r.SpuID = field.NewInt64(table, "spu_id")
	r.StoreID = field.NewString(table, "store_id")
	r.ExtJSON = field.NewString(table, "ext_json")
	r.CtrlJSON = field.NewString(table, "ctrl_json")

	r.fillFieldMap()

	return r
}

func (r *reviewStat) WithContext(ctx context.Context) IReviewStatDo {
	return r.reviewStatDo.WithContext(ctx)
}

func (r reviewStat) TableName() string { return r.reviewStatDo.TableName() }

func (r reviewStat) Alias() string { return r.reviewStatDo.Alias() }

func (r reviewStat) Columns(cols ...field.Expr) gen.Columns { return r.reviewStatDo.Columns(cols...) }

func (r *reviewStat) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *reviewStat) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 15)
	r.fieldMap["id"] = r.ID
	r.fieldMap["create_by"] = r.CreateBy
	r.fieldMap["update_by"] = r.UpdateBy
	r.fieldMap["create_at"] = r.CreateAt
	r.fieldMap["update_at"] = r.UpdateAt
	r.fieldMap["delete_at"] = r.DeleteAt
	r.fieldMap["total_count"] = r.TotalCount
	r.fieldMap["avg_score"] = r.AvgScore
	r.fieldMap["positive_rate"] = r.PositiveRate
	r.fieldMap["negative_rate"] = r.NegativeRate
	r.fieldMap["has_media_rate"] = r.HasMediaRate
	r.fieldMap["spu_id"] = r.SpuID
	r.fieldMap["store_id"] = r.StoreID
	r.fieldMap["ext_json"] = r.ExtJSON
	r.fieldMap["ctrl_json"] = r.CtrlJSON
}

func (r reviewStat) clone(db *gorm.DB) reviewStat {
	r.reviewStatDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r reviewStat) replaceDB(db *gorm.DB) reviewStat {
	r.reviewStatDo.ReplaceDB(db)
	return r
}

type reviewStatDo struct{ gen.DO }

type IReviewStatDo interface {
	gen.SubQuery
	Debug() IReviewStatDo
	WithContext(ctx context.Context) IReviewStatDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IReviewStatDo
	WriteDB() IReviewStatDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IReviewStatDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IReviewStatDo
	Not(conds ...gen.Condition) IReviewStatDo
	Or(conds ...gen.Condition) IReviewStatDo
	Select(conds ...field.Expr) IReviewStatDo
	Where(conds ...gen.Condition) IReviewStatDo
	Order(conds ...field.Expr) IReviewStatDo
	Distinct(cols ...field.Expr) IReviewStatDo
	Omit(cols ...field.Expr) IReviewStatDo
	Join(table schema.Tabler, on ...field.Expr) IReviewStatDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IReviewStatDo
	RightJoin(table schema.Tabler, on ...field.Expr) IReviewStatDo
	Group(cols ...field.Expr) IReviewStatDo
	Having(conds ...gen.Condition) IReviewStatDo
	Limit(limit int) IReviewStatDo
	Offset(offset int) IReviewStatDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IReviewStatDo
	Unscoped() IReviewStatDo
	Create(values ...*model.ReviewStat) error
	CreateInBatches(values []*model.ReviewStat, batchSize int) error
	Save(values ...*model.ReviewStat) error
	First() (*model.ReviewStat, error)
	Take() (*model.ReviewStat, error)
	Last() (*model.ReviewStat, error)
	Find() ([]*model.ReviewStat, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ReviewStat, err error)
	FindInBatches(result *[]*model.ReviewStat, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ReviewStat) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IReviewStatDo
	Assign(attrs ...field.AssignExpr) IReviewStatDo
	Joins(fields ...field.RelationField) IReviewStatDo
	Preload(fields ...field.RelationField) IReviewStatDo
	FirstOrInit() (*model.ReviewStat, error)
	FirstOrCreate() (*model.ReviewStat, error)
	FindByPage(offset int, limit int) (result []*model.ReviewStat, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Rows() (*sql.Rows, error)
	Row() *sql.Row
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IReviewStatDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r reviewStatDo) Debug() IReviewStatDo {
	return r.withDO(r.DO.Debug())
}

func (r reviewStatDo) WithContext(ctx context.Context) IReviewStatDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r reviewStatDo) ReadDB() IReviewStatDo {
	return r.Clauses(dbresolver.Read)
}

func (r reviewStatDo) WriteDB() IReviewStatDo {
	return r.Clauses(dbresolver.Write)
}

func (r reviewStatDo) Session(config *gorm.Session) IReviewStatDo {
	return r.withDO(r.DO.Session(config))
}

func (r reviewStatDo) Clauses(conds ...clause.Expression) IReviewStatDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r reviewStatDo) Returning(value interface{}, columns ...string) IReviewStatDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r reviewStatDo) Not(conds ...gen.Condition) IReviewStatDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r reviewStatDo) Or(conds ...gen.Condition) IReviewStatDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r reviewStatDo) Select(conds ...field.Expr) IReviewStatDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r reviewStatDo) Where(conds ...gen.Condition) IReviewStatDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r reviewStatDo) Order(conds ...field.Expr) IReviewStatDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r reviewStatDo) Distinct(cols ...field.Expr) IReviewStatDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r reviewStatDo) Omit(cols ...field.Expr) IReviewStatDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r reviewStatDo) Join(table schema.Tabler, on ...field.Expr) IReviewStatDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r reviewStatDo) LeftJoin(table schema.Tabler, on ...field.Expr) IReviewStatDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r reviewStatDo) RightJoin(table schema.Tabler, on ...field.Expr) IReviewStatDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r reviewStatDo) Group(cols ...field.Expr) IReviewStatDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r reviewStatDo) Having(conds ...gen.Condition) IReviewStatDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r reviewStatDo) Limit(limit int) IReviewStatDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r reviewStatDo) Offset(offset int) IReviewStatDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r reviewStatDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IReviewStatDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r reviewStatDo) Unscoped() IReviewStatDo {
	return r.withDO(r.DO.Unscoped())
}

func (r reviewStatDo) Create(values ...*model.ReviewStat) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r reviewStatDo) CreateInBatches(values []*model.ReviewStat, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r reviewStatDo) Save(values ...*model.ReviewStat) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r reviewStatDo) First() (*model.ReviewStat, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReviewStat), nil
	}
}

func (r reviewStatDo) Take() (*model.ReviewStat, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReviewStat), nil
	}
}

func (r reviewStatDo) Last() (*model.ReviewStat, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReviewStat), nil
	}
}

func (r reviewStatDo) Find() ([]*model.ReviewStat, error) {
	result, err := r.DO.Find()
	return result.([]*model.ReviewStat), err
}

func (r reviewStatDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ReviewStat, err error) {
	buf := make([]*model.ReviewStat, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r reviewStatDo) FindInBatches(result *[]*model.ReviewStat, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r reviewStatDo) Attrs(attrs ...field.AssignExpr) IReviewStatDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r reviewStatDo) Assign(attrs ...field.AssignExpr) IReviewStatDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r reviewStatDo) Joins(fields ...field.RelationField) IReviewStatDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r reviewStatDo) Preload(fields ...field.RelationField) IReviewStatDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r reviewStatDo) FirstOrInit() (*model.ReviewStat, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReviewStat), nil
	}
}

func (r reviewStatDo) FirstOrCreate() (*model.ReviewStat, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ReviewStat), nil
	}
}

func (r reviewStatDo) FindByPage(offset int, limit int) (result []*model.ReviewStat, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r reviewStatDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r reviewStatDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r reviewStatDo) Delete(models ...*model.ReviewStat) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *reviewStatDo) withDO(do gen.Dao) *reviewStatDo {
	r.DO = *do.(*gen.DO)
	return r
}
